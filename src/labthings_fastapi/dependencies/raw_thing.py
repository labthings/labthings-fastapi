"""FastAPI dependency to obtain a `.Thing` directly.

This module allows actions to obtain a `.Thing` instance without the
`.DirectThingClient` wrapper. As a rule, it is best to use `.DirectThingClient`
where possible.
"""

from __future__ import annotations
from typing import Annotated, Callable, TypeVar

from fastapi import Depends, Request

from ..thing import Thing
from .thing_server import find_thing_server


ThingInstance = TypeVar("ThingInstance", bound=Thing)


def find_raw_thing_by_class(
    cls: type[ThingInstance],
) -> Callable[[Request], ThingInstance]:
    """Generate a function that locates the instance of a Thing subclass.

    .. warning::

        Using a `.Thing` directly can be tricky: unless you really need to, it is
        usually better to use a `.DirectThingClient`, which provides an interface
        that should be identical to the HTTP thing client in Python. This is safer,
        and means code should be easier to translate between server and client-side.


    In order to access the instance of ``OtherThing`` attached to your thing server,
    declare your argument type as:

    .. code-block:: python

        OtherThingDep = Annotated[
            OtherThing, Depends(find_raw_thing_by_class(OtherThing))
        ]


        def endpoint(other_thing: OtherThingDep):
            pass

    LabThings will supply this argument automatically through the :ref:`dependencies`
    mechanism.

    Note that this function *returns* a dependency - it should be called with
    arguments inside `fastapi.Depends`.

    :param cls: is the `.Thing` subclass that will be returned by the dependency.

    :return: a dependency suitable for use with `fastapi.Depends` (see example).
    """

    def find_raw_thing(request: Request) -> ThingInstance:
        """Locate a Thing based on its class.

        This function is generated by `.find_raw_thing_by_class`, see
        the documentation there.

        :param request: is supplied by FastAPI

        :return: an instance of the `.Thing` subclass specified when the
            dependency was created.
        """
        server = find_thing_server(request.app)
        return server.thing_by_class(cls)

    return find_raw_thing


def raw_thing_dependency(cls: type[ThingInstance]) -> type[ThingInstance]:
    """Generate a dependency that will supply a particular Thing at runtime.

    .. warning::

        If it is possible to use a `.direct_thing_client_dependency` instead,
        that is preferable. The current function supplies a `.Thing` directly
        and does not supply dependency parameters or enforce the public API.

    This function should make it possible for an action to obtain a `.Thing`
    object directly. If you declare a type alias using this function, it will
    include an annotation that prompts FastAPI to supply the instance of the
    class.

    .. warning::

        Most linters and type checkers will not accept the result of a function
        call as a valid type. It may be preferable to use
        `.find_raw_thing_by_class` directly, even though it is slightly more
        verbose.

    Usage:

    .. code-block:: python

        from my_other_thing import MyOtherThing as MyOtherThingClass

        MyOtherThing = raw_thing_dependency(MyOtherThingClass)


        class MyThing(Thing):
            @thing_action
            def do_something(self, other_thing: MyOtherThing) -> None:
                "This action needs no arguments"
                other_thing.function_only_available_in_python()

    :param cls: The class of the Thing that will be supplied

    :return: An annotated type that works as a dependency to supply an
        instance of ``cls`` at runtime.
    """
    return Annotated[  # type: ignore[return-value]
        cls, Depends(find_raw_thing_by_class(cls))
    ]
