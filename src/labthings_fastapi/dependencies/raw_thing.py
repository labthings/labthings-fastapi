from __future__ import annotations
from typing import Annotated, Callable, TypeVar

from fastapi import Depends, Request

from ..thing import Thing
from ..server import find_thing_server


ThingInstance = TypeVar("ThingInstance", bound=Thing)


def find_raw_thing_by_class(
    cls: type[ThingInstance],
) -> Callable[[Request], ThingInstance]:
    """Generate a function that locates the instance of a specific Thing subclass

    ```{warning}
    Using a raw {class}`..thing.Thing` can be tricky: unless you really need to, it is
    usually better to use an internal thing client, which provides an interface that
    should be identical to the HTTP thing client in Python. This is safer, and means
    code should be easier to translate between server and client-side.
    ```

    In order to access the instance of `OtherThing` attached to your thing server,
    declare your argument type as:

    ```{code-block} python
    def endpoint(
        other_thing: Annotated[OtherThing, Depends(find_thing_by_class(OtherThing)]
    ):
        pass
    ```

    LabThings will supply this argument automatically through the FastAPI dependency
    mechanism.
    """

    def find_raw_thing(request: Request) -> ThingInstance:
        """A dependency to locate a Thing based on its class.

        This function is generated by :func:`find_raw_thing_by_class`, see that for docs.
        """
        server = find_thing_server(request.app)
        return server.thing_by_class(cls)

    return find_raw_thing


def raw_thing_dependency(cls: type[ThingInstance]) -> type[ThingInstance]:
    """Generate a dependency that will supply a particular Thing at runtime.

    ```{warning}
    Using a raw {class}`labthings_fastapi.thing.Thing` can be tricky: unless you really need to, it is
    usually better to use {class}`labthings_fastapi.dependencies.thing.direct_thing_client_dependency`,
    which provides an interface that should be identical to the HTTP thing
    client in Python. This is safer, and means code should be easier to
    translate between server and client-side.
    ```

    This function should make it simple to depend on a {class}`Thing` object directly. If
    you declare a type alias using this function, it will include an annotation that
    prompts FastAPI to supply the instance of the class.

    Usage:

    ```{code-block} python

    from my_other_thing import MyOtherThing as MyOtherThingClass

    MyOtherThing = raw_thing_dependency(MyOtherThingClass)

    class MyThing(Thing):
        @thing_action
        def do_something(self, other_thing: MyOtherThing) -> None:
            "This action needs no arguments"
            other_thing.function_only_available_in_python()
    ```
    :param cls: The class of the Thing that will be supplied
    :return: A type alias that works as a dependency to supply an instance of ``cls``
        at runtime.
    """
    return Annotated[cls, Depends(find_raw_thing_by_class(cls))]  # type: ignore[return-value]
